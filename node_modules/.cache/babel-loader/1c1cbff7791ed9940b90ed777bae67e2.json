{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/hb-2547/prerna/assignement/pm-tool/client-using-saga/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  var _iterator = _createForOfIteratorHelper(documentAST.definitions),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var definitionNode = _step.value;\n\n      switch (definitionNode.kind) {\n        case Kind.OPERATION_DEFINITION:\n          operations.push(definitionNode);\n          break;\n\n        case Kind.FRAGMENT_DEFINITION:\n          depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);\n          break;\n\n        default: // ignore non-executable definitions\n\n      }\n    } // For each operation, produce a new synthesized AST which includes only what\n    // is necessary for completing that operation.\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var separatedDocumentASTs = Object.create(null);\n\n  var _loop = function _loop() {\n    var operation = _operations[_i];\n    var dependencies = new Set();\n\n    var _iterator2 = _createForOfIteratorHelper(collectDependencies(operation.selectionSet)),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragmentName = _step2.value;\n        collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n      } // Provides the empty string for anonymous operations.\n\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(function (node) {\n        return node === operation || node.kind === Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);\n      })\n    };\n  };\n\n  for (var _i = 0, _operations = operations; _i < _operations.length; _i++) {\n    _loop();\n  }\n\n  return separatedDocumentASTs;\n} // From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\n\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    var immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      var _iterator3 = _createForOfIteratorHelper(immediateDeps),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var toName = _step3.value;\n          collectTransitiveDependencies(collected, depGraph, toName);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  var dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread: function FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    }\n  });\n  return dependencies;\n}","map":null,"metadata":{},"sourceType":"module"}