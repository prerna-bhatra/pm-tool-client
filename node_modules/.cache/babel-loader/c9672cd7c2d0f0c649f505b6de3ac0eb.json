{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/hb-2547/prerna/assignement/pm-tool/client-using-saga/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { isPromise } from './isPromise.mjs';\n/**\n * Similar to Array.prototype.reduce(), however the reducing callback may return\n * a Promise, in which case reduction will continue after each promise resolves.\n *\n * If the callback does not return a Promise, then this function will also not\n * return a Promise.\n */\n\nexport function promiseReduce(values, callbackFn, initialValue) {\n  var accumulator = initialValue;\n\n  var _iterator = _createForOfIteratorHelper(values),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var value = _step.value;\n      accumulator = isPromise(accumulator) ? accumulator.then(function (resolved) {\n        return callbackFn(resolved, value);\n      }) : callbackFn(accumulator, value);\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return accumulator;\n}","map":null,"metadata":{},"sourceType":"module"}